// ============================================
// PCG„Éé„Éº„Éâ‰∏ÄË¶ß JavaScript„É≠„Ç∏„ÉÉ„ÇØ
// ============================================

// „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞
let allNodes = [];
let allTags = {};
let tagCategories = [];
let selectedTags = new Set();
let currentSortMode = 'name-asc';
let filterMode = 'or'; // 'or' „Åæ„Åü„ÅØ 'and'

// ============================================
// ÂàùÊúüÂåñ
// ============================================
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ PCG„Éé„Éº„Éâ‰∏ÄË¶ß„ÇíÂàùÊúüÂåñ‰∏≠...');

    try {
        await loadData();
        renderTagFilters();
        renderNodeList();
        setupEventListeners();
        updateStats();

        console.log('‚úÖ ÂàùÊúüÂåñÂÆå‰∫Ü');
    } catch (error) {
        console.error('‚ùå ÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
        showError('„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
});

// ============================================
// „Éá„Éº„ÇøË™≠„ÅøËæº„Åø
// ============================================
async function loadData() {
    try {
        // „Éé„Éº„Éâ„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø
        const nodesResponse = await fetch('nodes-data.json');
        const nodesData = await nodesResponse.json();
        allNodes = nodesData.nodes;

        // ÁîüÊàêÊó•ÊôÇ„ÇíË°®Á§∫
        if (nodesData.generatedAt) {
            const date = new Date(nodesData.generatedAt);
            document.getElementById('generatedDate').textContent = date.toLocaleString('ja-JP');
        }

        document.getElementById('totalCount').textContent = allNodes.length;
        document.getElementById('footerTotalCount').textContent = allNodes.length;

        // „Çø„Ç∞ÂÆöÁæ©„ÅÆË™≠„ÅøËæº„Åø
        const tagsResponse = await fetch('tags-definition.json');
        const tagsData = await tagsResponse.json();
        tagCategories = tagsData.tagCategories;

        // „Çø„Ç∞„ÅÆÈõÜË®à
        allTags = collectTags(allNodes);

        console.log(`üìä ${allNodes.length} „Éé„Éº„Éâ„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü`);
        console.log(`üè∑Ô∏è  ${Object.keys(allTags).length} Á®ÆÈ°û„ÅÆ„Çø„Ç∞„ÇíÊ§úÂá∫`);

    } catch (error) {
        console.error('„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
        throw error;
    }
}

// „Çø„Ç∞„ÇíÈõÜË®à
function collectTags(nodes) {
    const tags = {};
    nodes.forEach(node => {
        if (node.tags && Array.isArray(node.tags)) {
            node.tags.forEach(tag => {
                tags[tag] = (tags[tag] || 0) + 1;
            });
        }
    });
    return tags;
}

// ============================================
// „Çø„Ç∞„Éï„Ç£„É´„Çø„ÅÆ„É¨„É≥„ÉÄ„É™„É≥„Ç∞
// ============================================
function renderTagFilters() {
    const container = document.getElementById('tagFilters');
    container.innerHTML = '';

    tagCategories.forEach(category => {
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'tag-category';

        const categoryName = document.createElement('div');
        categoryName.className = 'tag-category-name';
        categoryName.textContent = category.name;
        categoryDiv.appendChild(categoryName);

        const optionsDiv = document.createElement('div');
        optionsDiv.className = 'tag-options';

        category.tags.forEach(tag => {
            const count = allTags[tag] || 0;
            if (count === 0) return; // „Çø„Ç∞„Åå‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó

            const label = document.createElement('label');
            label.className = 'tag-checkbox';

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.value = tag;
            checkbox.dataset.tag = tag;

            const labelText = document.createElement('span');
            labelText.textContent = tag;

            const countBadge = document.createElement('span');
            countBadge.className = 'tag-count';
            countBadge.textContent = count;

            label.appendChild(checkbox);
            label.appendChild(labelText);
            label.appendChild(countBadge);

            optionsDiv.appendChild(label);
        });

        categoryDiv.appendChild(optionsDiv);
        container.appendChild(categoryDiv);
    });
}

// ============================================
// „Éé„Éº„Éâ„É™„Çπ„Éà„ÅÆ„É¨„É≥„ÉÄ„É™„É≥„Ç∞
// ============================================
function renderNodeList() {
    const filteredNodes = filterAndSortNodes();
    const container = document.getElementById('nodeList');
    const emptyState = document.getElementById('emptyState');

    if (filteredNodes.length === 0) {
        container.style.display = 'none';
        emptyState.style.display = 'block';
        return;
    }

    container.style.display = 'grid';
    emptyState.style.display = 'none';
    container.innerHTML = '';

    filteredNodes.forEach(node => {
        const card = createNodeCard(node);
        container.appendChild(card);
    });

    updateStats(filteredNodes.length);
}

// „Éé„Éº„Éâ„Ç´„Éº„Éâ„Çí‰ΩúÊàê
function createNodeCard(node) {
    const card = document.createElement('div');
    card.className = 'node-card';
    card.dataset.tags = (node.tags || []).join(',');

    // „Éò„ÉÉ„ÉÄ„Éº
    const header = document.createElement('div');
    header.className = 'node-header';

    const nameLink = document.createElement('a');
    nameLink.href = node.docPath;
    nameLink.className = 'node-name';
    nameLink.textContent = node.name;
    header.appendChild(nameLink);

    if (node.category) {
        header.appendChild(document.createTextNode(' '));
        const category = document.createElement('span');
        category.className = 'node-category';
        category.textContent = node.category;
        header.appendChild(category);
    }

    card.appendChild(header);

    // Ê¶ÇË¶Å
    const overview = document.createElement('div');
    overview.className = 'node-overview';
    overview.textContent = node.overview || 'Ê¶ÇË¶ÅÊÉÖÂ†±„Å™„Åó';
    card.appendChild(overview);

    // Ê©üËÉΩ
    if (node.features && node.features.length > 0 && node.features[0] !== 'Ê©üËÉΩÊÉÖÂ†±„Å™„Åó') {
        const featuresDiv = document.createElement('div');
        featuresDiv.className = 'node-features';

        const featuresTitle = document.createElement('div');
        featuresTitle.className = 'node-features-title';
        featuresTitle.textContent = '‰∏ª„Å™Ê©üËÉΩ';
        featuresDiv.appendChild(featuresTitle);

        const featuresList = document.createElement('ul');
        featuresList.className = 'node-features-list';

        node.features.slice(0, 3).forEach(feature => {
            const li = document.createElement('li');
            li.textContent = feature;
            featuresList.appendChild(li);
        });

        featuresDiv.appendChild(featuresList);
        card.appendChild(featuresDiv);
    }

    // „Çø„Ç∞
    if (node.tags && node.tags.length > 0) {
        const tagsDiv = document.createElement('div');
        tagsDiv.className = 'node-tags';

        node.tags.forEach(tag => {
            const tagSpan = document.createElement('span');
            tagSpan.className = 'tag';
            if (selectedTags.has(tag)) {
                tagSpan.classList.add('active');
            }
            tagSpan.textContent = tag;
            tagsDiv.appendChild(tagSpan);
        });

        card.appendChild(tagsDiv);
    }

    return card;
}

// ============================================
// „Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Å®„ÇΩ„Éº„Éà
// ============================================
function filterAndSortNodes() {
    const searchQuery = document.getElementById('searchInput').value.toLowerCase();

    let filtered = allNodes.filter(node => {
        // Ê§úÁ¥¢„ÇØ„Ç®„É™„Åß„Éï„Ç£„É´„Çø
        if (searchQuery) {
            const matchName = node.name.toLowerCase().includes(searchQuery);
            const matchOverview = (node.overview || '').toLowerCase().includes(searchQuery);
            if (!matchName && !matchOverview) {
                return false;
            }
        }

        // „Çø„Ç∞„Åß„Éï„Ç£„É´„ÇøÔºàAND/ORÊù°‰ª∂Ôºâ
        if (selectedTags.size > 0) {
            const nodeTags = new Set(node.tags || []);
            if (filterMode === 'and') {
                // ANDÊù°‰ª∂: „Åô„Åπ„Å¶„ÅÆ„Çø„Ç∞„ÅåÂê´„Åæ„Çå„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã
                for (const tag of selectedTags) {
                    if (!nodeTags.has(tag)) {
                        return false;
                    }
                }
            } else {
                // ORÊù°‰ª∂: „ÅÑ„Åö„Çå„Åã„ÅÆ„Çø„Ç∞„ÅåÂê´„Åæ„Çå„Çå„Å∞OK
                let hasAnyTag = false;
                for (const tag of selectedTags) {
                    if (nodeTags.has(tag)) {
                        hasAnyTag = true;
                        break;
                    }
                }
                if (!hasAnyTag) {
                    return false;
                }
            }
        }

        return true;
    });

    // „ÇΩ„Éº„Éà
    filtered.sort((a, b) => {
        switch (currentSortMode) {
            case 'name-asc':
                return a.name.localeCompare(b.name, 'ja');
            case 'name-desc':
                return b.name.localeCompare(a.name, 'ja');
            case 'category':
                const catA = a.category || '';
                const catB = b.category || '';
                if (catA !== catB) {
                    return catA.localeCompare(catB, 'ja');
                }
                return a.name.localeCompare(b.name, 'ja');
            default:
                return 0;
        }
    });

    return filtered;
}

// ============================================
// Áµ±Ë®àÊÉÖÂ†±„ÅÆÊõ¥Êñ∞
// ============================================
function updateStats(currentCount) {
    const count = currentCount !== undefined ? currentCount : allNodes.length;
    document.getElementById('nodeCount').textContent = count;
}

// ============================================
// „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
// ============================================
function setupEventListeners() {
    // Ê§úÁ¥¢„Éú„ÉÉ„ÇØ„Çπ
    const searchInput = document.getElementById('searchInput');
    const clearSearchButton = document.getElementById('clearSearch');

    searchInput.addEventListener('input', debounce(() => {
        // „ÇØ„É™„Ç¢„Éú„Çø„É≥„ÅÆË°®Á§∫/ÈùûË°®Á§∫
        if (searchInput.value) {
            clearSearchButton.style.display = 'flex';
        } else {
            clearSearchButton.style.display = 'none';
        }
        renderNodeList();
    }, 300));

    // Ê§úÁ¥¢„ÇØ„É™„Ç¢„Éú„Çø„É≥
    clearSearchButton.addEventListener('click', () => {
        searchInput.value = '';
        clearSearchButton.style.display = 'none';
        renderNodeList();
    });

    // „Çø„Ç∞„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ
    const tagFilters = document.getElementById('tagFilters');
    tagFilters.addEventListener('change', (e) => {
        if (e.target.type === 'checkbox') {
            const tag = e.target.value;
            if (e.target.checked) {
                selectedTags.add(tag);
            } else {
                selectedTags.delete(tag);
            }
            renderNodeList();
        }
    });

    // „Éï„Ç£„É´„Çø„É¢„Éº„ÉâÂàá„ÇäÊõø„ÅàÔºàAND/ORÔºâ
    const filterModeRadios = document.querySelectorAll('input[name="filterMode"]');
    filterModeRadios.forEach(radio => {
        radio.addEventListener('change', (e) => {
            filterMode = e.target.value;
            renderNodeList();
        });
    });

    // „Çø„Ç∞„Éï„Ç£„É´„Çø„ÇØ„É™„Ç¢„Éú„Çø„É≥Ôºà„Çø„Ç∞„ÅÆ„Åø„ÇØ„É™„Ç¢Ôºâ
    const clearButton = document.getElementById('clearFilters');
    clearButton.addEventListener('click', () => {
        selectedTags.clear();
        document.querySelectorAll('#tagFilters input[type="checkbox"]').forEach(cb => {
            cb.checked = false;
        });
        renderNodeList();
    });

    // „ÇΩ„Éº„ÉàÈÅ∏Êäû
    const sortSelect = document.getElementById('sortSelect');
    sortSelect.addEventListener('change', (e) => {
        currentSortMode = e.target.value;
        renderNodeList();
    });
}

// ============================================
// „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞
// ============================================

// „Éá„Éê„Ç¶„É≥„Çπ
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// „Ç®„É©„ÉºË°®Á§∫
function showError(message) {
    const container = document.getElementById('nodeList');
    container.innerHTML = `
        <div class="empty-state" style="display: block;">
            <div class="empty-icon">‚ö†Ô∏è</div>
            <h3>„Ç®„É©„Éº</h3>
            <p>${message}</p>
        </div>
    `;
}

// ============================================
// „Éá„Éê„ÉÉ„Ç∞Áî®
// ============================================
if (window.location.search.includes('debug')) {
    window.debugInfo = () => {
        console.log('=== Debug Info ===');
        console.log('Total Nodes:', allNodes.length);
        console.log('Selected Tags:', Array.from(selectedTags));
        console.log('Sort Mode:', currentSortMode);
        console.log('All Tags:', allTags);
    };
    console.log('üí° „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ: window.debugInfo() „ÇíÂÆüË°å„Åó„Å¶ÊÉÖÂ†±„ÇíË°®Á§∫');
}
